Index: app/src/main/java/com/example/agrimart/data/model/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.agrimart.data.model;\r\n\r\nimport com.google.firebase.Timestamp;\r\nimport com.google.firebase.firestore.PropertyName;\r\n\r\nimport java.io.Serializable;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class Order implements Serializable {\r\n\r\n    @PropertyName(\"orderId\")\r\n    private String orderId;\r\n\r\n    @PropertyName(\"products\")\r\n    private List<Product> products;\r\n\r\n    @PropertyName(\"status\")\r\n    private String status;\r\n\r\n    @PropertyName(\"total_price\")\r\n    private int totalPrice;\r\n\r\n    @PropertyName(\"userId\")\r\n    private String userId;\r\n\r\n    @PropertyName(\"storeId\")\r\n    private String sellerId;\r\n\r\n    @PropertyName(\"order_code\")\r\n    private String orderCode;\r\n\r\n    @PropertyName(\"address\")\r\n    private String address;\r\n\r\n    @PropertyName(\"shipping_name\")\r\n    private String shippingName;\r\n\r\n    @PropertyName(\"shipping_fee\")\r\n    private Double shippingFee;\r\n\r\n    private String statusDelivery;\r\n\r\n    private String storeName;\r\n\r\n    private String paymentMethod;\r\n\r\n    private boolean checkRating;\r\n\r\n    private String username;\r\n\r\n    private String phonenumber;\r\n\r\n    @PropertyName(\"created_at\")\r\n    private Timestamp createdAt;\r\n\r\n    private String transactionId;\r\n\r\n    private Timestamp transactionDate;\r\n\r\n    @PropertyName(\"vnp_TxnRef\")\r\n    private String vnpTxnRef;\r\n\r\n    public Order() {\r\n    }\r\n\r\n    public Order(String orderId, String status, int totalPrice) {\r\n        this.orderId = orderId;\r\n        this.status = status;\r\n        this.totalPrice = totalPrice;\r\n    }\r\n\r\n    @PropertyName(\"orderId\")\r\n    public String getOrderId() {\r\n        return orderId;\r\n    }\r\n\r\n    @PropertyName(\"orderId\")\r\n    public void setOrderId(String orderId) {\r\n        this.orderId = orderId;\r\n    }\r\n\r\n    @PropertyName(\"status\")\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n\r\n    @PropertyName(\"status\")\r\n    public void setStatus(String status) {\r\n        this.status = status;\r\n    }\r\n\r\n    @PropertyName(\"total_price\")\r\n    public int getTotalPrice() {\r\n        return totalPrice;\r\n    }\r\n\r\n    @PropertyName(\"total_price\")\r\n    public void setTotalPrice(int totalPrice) {\r\n        this.totalPrice = totalPrice;\r\n    }\r\n\r\n    @PropertyName(\"userId\")\r\n    public String getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    @PropertyName(\"userId\")\r\n    public void setUserId(String userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    @PropertyName(\"order_code\")\r\n    public String getOrderCode() {\r\n        return orderCode;\r\n    }\r\n\r\n    @PropertyName(\"order_code\")\r\n    public void setOrderCode(String orderCode) {\r\n        this.orderCode = orderCode;\r\n    }\r\n\r\n    public String getStatusDelivery() {\r\n        return statusDelivery;\r\n    }\r\n\r\n    public void setStatusDelivery(String statusDelivery) {\r\n        this.statusDelivery = statusDelivery;\r\n    }\r\n\r\n    @PropertyName(\"address\")\r\n    public String getAddress() {\r\n        return address;\r\n    }\r\n\r\n    @PropertyName(\"address\")\r\n    public void setAddress(String address) {\r\n        this.address = address;\r\n    }\r\n\r\n    @PropertyName(\"storeId\")\r\n    public String getSellerId() {\r\n        return sellerId;\r\n    }\r\n\r\n    @PropertyName(\"storeId\")\r\n    public void setSellerId(String sellerId) {\r\n        this.sellerId = sellerId;\r\n    }\r\n\r\n    public List<Product> getProducts() {\r\n        return products;\r\n    }\r\n\r\n    public void setProducts(List<Product> products) {\r\n        this.products = products;\r\n    }\r\n\r\n    public String getStoreName() {\r\n        return storeName;\r\n    }\r\n\r\n    public void setStoreName(String storeName) {\r\n        this.storeName = storeName;\r\n    }\r\n\r\n    public String getPaymentMethod() {\r\n        return paymentMethod;\r\n    }\r\n\r\n    public void setPaymentMethod(String paymentMethod) {\r\n        this.paymentMethod = paymentMethod;\r\n    }\r\n\r\n    public boolean isCheckRating() {\r\n        return checkRating;\r\n    }\r\n\r\n    public void setCheckRating(boolean checkRating) {\r\n        this.checkRating = checkRating;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPhonenumber() {\r\n        return phonenumber;\r\n    }\r\n\r\n    public void setPhonenumber(String phonenumber) {\r\n        this.phonenumber = phonenumber;\r\n    }\r\n\r\n    @PropertyName(\"shipping_name\")\r\n    public String getShippingName() {\r\n        return shippingName;\r\n    }\r\n\r\n    @PropertyName(\"shipping_name\")\r\n    public void setShippingName(String shippingName) {\r\n        this.shippingName = shippingName;\r\n    }\r\n\r\n    @PropertyName(\"shipping_fee\")\r\n    public Double getShippingFee() {\r\n        return shippingFee;\r\n    }\r\n\r\n    @PropertyName(\"shipping_fee\")\r\n    public void setShippingFee(Double shippingFee) {\r\n        this.shippingFee = shippingFee;\r\n    }\r\n\r\n    @PropertyName(\"created_at\")\r\n    public Timestamp getCreatedAt() {\r\n        return createdAt;\r\n    }\r\n\r\n    @PropertyName(\"created_at\")\r\n    public void setCreatedAt(Timestamp createdAt) {\r\n        this.createdAt = createdAt;\r\n    }\r\n\r\n    public String getTransactionId() {\r\n        return transactionId;\r\n    }\r\n\r\n    public void setTransactionId(String transactionId) {\r\n        this.transactionId = transactionId;\r\n    }\r\n\r\n    public Timestamp getTransactionDate() {\r\n        return transactionDate;\r\n    }\r\n\r\n    public void setTransactionDate(Timestamp transactionDate) {\r\n        this.transactionDate = transactionDate;\r\n    }\r\n\r\n    @PropertyName(\"vnp_TxnRef\")\r\n    public String getVnpTxnRef() {\r\n        return vnpTxnRef;\r\n    }\r\n\r\n    @PropertyName(\"vnp_TxnRef\")\r\n    public void setVnpTxnRef(String vnpTxnRef) {\r\n        this.vnpTxnRef = vnpTxnRef;\r\n    }\r\n\r\n    public String getFormattedCreatedAtDate() {\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH:mm\", Locale.getDefault());\r\n        Date date = new Date(createdAt.toDate().getTime());\r\n        return dateFormat.format(date);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/agrimart/data/model/Order.java b/app/src/main/java/com/example/agrimart/data/model/Order.java
--- a/app/src/main/java/com/example/agrimart/data/model/Order.java	(revision ba936340bbdac641ba150d1b6cdedfa85d9a87db)
+++ b/app/src/main/java/com/example/agrimart/data/model/Order.java	(date 1733220401203)
@@ -218,15 +218,23 @@
         this.shippingFee = shippingFee;
     }
 
+    private long createdAtMillis;  // Chúng ta sẽ sử dụng long thay vì Timestamp để truyền qua Intent
+    // Getter và setter cho createdAtMillis
+    public long getCreatedAtMillis() {
+        return createdAtMillis;
+    }
+
+    @PropertyName("created_at")
+    public void setCreatedAt(Timestamp createdAt) {
+        this.createdAtMillis = createdAt.toDate().getTime(); // Chuyển Timestamp thành long
+    }
+
     @PropertyName("created_at")
     public Timestamp getCreatedAt() {
         return createdAt;
     }
 
-    @PropertyName("created_at")
-    public void setCreatedAt(Timestamp createdAt) {
-        this.createdAt = createdAt;
-    }
+    private long transactionDateMillis;
 
     public String getTransactionId() {
         return transactionId;
@@ -241,7 +249,7 @@
     }
 
     public void setTransactionDate(Timestamp transactionDate) {
-        this.transactionDate = transactionDate;
+        this.transactionDateMillis = transactionDate.toDate().getTime();
     }
 
     @PropertyName("vnp_TxnRef")
@@ -256,7 +264,16 @@
 
     public String getFormattedCreatedAtDate() {
         SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm", Locale.getDefault());
-        Date date = new Date(createdAt.toDate().getTime());
+        Date date = new Date(createdAtMillis);
         return dateFormat.format(date);
     }
+
+    public long getTransactionDateMillis() {
+        return transactionDateMillis;
+    }
+
+    public void setTransactionDateMillis(long transactionDateMillis) {
+        this.transactionDateMillis = transactionDateMillis;
+        this.createdAtMillis = createdAt.toDate().getTime();
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/OrderInformationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.agrimart.ui.MyProfile.PurchasedOrders;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Switch;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatButton;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.agrimart.R;\r\nimport com.example.agrimart.adapter.OrderStoreAdapter;\r\nimport com.example.agrimart.adapter.ProductOrderAdapter;\r\nimport com.example.agrimart.data.model.Cart;\r\nimport com.example.agrimart.data.model.Order;\r\nimport com.example.agrimart.data.model.Product;\r\nimport com.example.agrimart.ui.Cart.CheckoutActivity;\r\nimport com.example.agrimart.ui.MyProfile.MyRating.ProductRatingActivity;\r\nimport com.example.agrimart.ui.MyProfile.MyRating.ShopRatingActivity;\r\nimport com.example.agrimart.viewmodel.OrderStatusFragmentViewModel;\r\nimport com.google.firebase.Timestamp;\r\n\r\nimport java.text.NumberFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class OrderInformationActivity extends AppCompatActivity {\r\n    Order order;\r\n    TextView status, shippingName, address, totalPriceProduct, shippingFee, totalPrice, tvRefund;\r\n    AppCompatButton btnBuy, btnDetail;\r\n    ImageButton btnBack;\r\n    RecyclerView recyclerViewDetail;\r\n    LinearLayout llRefund;\r\n    private final int REQUEST_CODE_RATING = 1001;\r\n    private OrderStatusFragmentViewModel viewModel;\r\n    int position;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_order_information);\r\n\r\n        // Initialize order object from intent\r\n        order = (Order) getIntent().getSerializableExtra(\"order\");\r\n        viewModel = new OrderStatusFragmentViewModel();\r\n\r\n        // Add controls\r\n        addControl();\r\n\r\n        // Load order details\r\n        loadDetail();\r\n\r\n        // Set events\r\n        addEvent();\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == REQUEST_CODE_RATING) {\r\n            if (resultCode == RESULT_OK) {\r\n                finish();\r\n            }\r\n        }\r\n    }\r\n\r\n    void addControl() {\r\n        status = findViewById(R.id.status);\r\n        shippingName = findViewById(R.id.shipping_name);\r\n        address = findViewById(R.id.address);\r\n        totalPriceProduct = findViewById(R.id.total_price_product);\r\n        shippingFee = findViewById(R.id.shipping_fee);\r\n        totalPrice = findViewById(R.id.total_price);\r\n        btnBuy = findViewById(R.id.btn_buy);\r\n        btnBack = findViewById(R.id.btn_back);\r\n        btnDetail = findViewById(R.id.btn_detail);\r\n        recyclerViewDetail = findViewById(R.id.recyclerViewDetail);\r\n        llRefund = findViewById(R.id.ll_refund);\r\n        tvRefund = findViewById(R.id.tv_refund);\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    void loadDetail() {\r\n        shippingName.setText(order.getShippingName());\r\n        String userDetail = order.getUsername() + \" \" + order.getPhonenumber();\r\n        address.setText(\"Huy Long 0987654321\" + \"\\n\" + order.getAddress());\r\n\r\n        // Format shipping fee and total price\r\n        shippingFee.setText(formatCurrency(order.getShippingFee()) + \" đ\");\r\n        totalPrice.setText(\"Tổng số tiền: \" + formatCurrency(order.getTotalPrice()) + \" đ\");\r\n\r\n        // Calculate total product price (excluding shipping fee)\r\n        double priceProduct = order.getTotalPrice() - order.getShippingFee();\r\n        totalPriceProduct.setText(formatCurrency(priceProduct) + \" đ\");\r\n\r\n        // Format the createdAt date\r\n        status.setText(getStatus(order.getStatus()) + order.getFormattedCreatedAtDate());\r\n\r\n        // Set up RecyclerView for product details\r\n        List<Product> products = order.getProducts();\r\n        ProductOrderAdapter productOrderAdapter = new ProductOrderAdapter(products);\r\n        recyclerViewDetail.setAdapter(productOrderAdapter);\r\n        recyclerViewDetail.setLayoutManager(new LinearLayoutManager(this));\r\n    }\r\n\r\n    void addEvent() {\r\n        btnBack.setOnClickListener(v -> finish());\r\n        btnBuy.setOnClickListener(v -> {\r\n\r\n            if(order.isCheckRating())\r\n            {\r\n                onCheckoutButtonClicked();\r\n            }else {\r\n                openRating();\r\n            }\r\n\r\n        });\r\n        btnDetail.setOnClickListener(v -> {\r\n            if(order.isCheckRating())\r\n            {\r\n                openRatingDetail();\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    String getStatus(String status) {\r\n\r\n        switch (status) {\r\n            case \"pending\":\r\n                return \"Chờ xác nhận \";\r\n            case \"approved\":\r\n                return \"Chờ lấy hàng \";\r\n            case \"delivery\":\r\n                btnDetail.setVisibility(View.VISIBLE);\r\n                btnDetail.setText(\"Trả hàng/Hoàn tiền\");\r\n                if(!order.isCheckRating())\r\n                {\r\n                    btnDetail.setText(\"Trả hàng/Hoàn tiền\");\r\n                    btnBuy.setText(\"Đã nhận hàng\");\r\n                }\r\n                return \"Chờ giao hàng \";\r\n\r\n            case \"delivered\":\r\n                btnDetail.setVisibility(View.VISIBLE);\r\n                if(!order.isCheckRating())\r\n                {\r\n                    btnDetail.setText(\"Trả hàng/Hoàn tiền\");\r\n                    btnBuy.setText(\"Đánh giá\");\r\n                }\r\n                return \"Đã giao vào \";\r\n            case \"canceled\":\r\n                llRefund.setVisibility(View.VISIBLE);\r\n                return \"Đã hủy vào \";\r\n        }\r\n\r\n        return \"Không xác định\";\r\n\r\n    }\r\n\r\n    // Helper method to format currency\r\n    private String formatCurrency(double amount) {\r\n        return NumberFormat.getInstance(Locale.getDefault()).format(amount);\r\n    }\r\n\r\n    private void onCheckoutButtonClicked() {\r\n        List<Product> selectedProducts = new ArrayList<>();\r\n        List<String> productIds = new ArrayList<>();\r\n\r\n        selectedProducts = order.getProducts();\r\n\r\n        for (Product p : selectedProducts)\r\n        {\r\n            productIds.add(p.getProduct_id());\r\n        }\r\n\r\n        Intent intent = new Intent(this, CheckoutActivity.class);\r\n        intent.putParcelableArrayListExtra(\"selectedProducts\", new ArrayList<>(selectedProducts));\r\n        intent.putStringArrayListExtra(\"productIds\", new ArrayList<>(productIds));\r\n        intent.putExtra(\"storeName\", order.getStoreName());\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void openRating() {\r\n        if (order.getStatus().equals(\"delivery\")) {\r\n            viewModel.updateOrderStatus(order.getOrderId(), \"delivered\", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {\r\n                @Override\r\n                public void onSuccess(String message) {\r\n                    // Cập nhật trạng thái của item trong adapter\r\n                    viewModel.getData(\"delivery\");\r\n                    order.setStatus(\"delivery\");\r\n\r\n                    Intent intent = new Intent(OrderInformationActivity.this, ProductRatingActivity.class);\r\n                    intent.putExtra(\"order\", order);\r\n                    startActivityForResult(intent, REQUEST_CODE_RATING);\r\n                }\r\n\r\n                @Override\r\n                public void onError(String errorMessage) {\r\n\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            order.setStatus(\"delivered\");\r\n            Intent intent = new Intent(this, ProductRatingActivity.class);\r\n            intent.putExtra(\"order\", order);\r\n            startActivityForResult(intent, REQUEST_CODE_RATING);\r\n        }\r\n\r\n    }\r\n\r\n    private void openRatingDetail() {\r\n        Intent intent = new Intent(this, ShopRatingActivity.class);\r\n        intent.putExtra(\"order\", order);\r\n        startActivity(intent);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/OrderInformationActivity.java b/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/OrderInformationActivity.java
--- a/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/OrderInformationActivity.java	(revision ba936340bbdac641ba150d1b6cdedfa85d9a87db)
+++ b/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/OrderInformationActivity.java	(date 1733215981849)
@@ -142,7 +142,7 @@
                 return "Chờ xác nhận ";
             case "approved":
                 return "Chờ lấy hàng ";
-            case "delivery":
+            case "delivering":
                 btnDetail.setVisibility(View.VISIBLE);
                 btnDetail.setText("Trả hàng/Hoàn tiền");
                 if(!order.isCheckRating())
@@ -193,13 +193,13 @@
     }
 
     private void openRating() {
-        if (order.getStatus().equals("delivery")) {
+        if (order.getStatus().equals("delivering")) {
             viewModel.updateOrderStatus(order.getOrderId(), "delivered", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {
                 @Override
                 public void onSuccess(String message) {
                     // Cập nhật trạng thái của item trong adapter
-                    viewModel.getData("delivery");
-                    order.setStatus("delivery");
+                    viewModel.getData("delivering");
+                    order.setStatus("delivering");
 
                     Intent intent = new Intent(OrderInformationActivity.this, ProductRatingActivity.class);
                     intent.putExtra("order", order);
Index: app/src/main/java/com/example/agrimart/adapter/OrderStoreAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.agrimart.adapter;\r\n\r\nimport static androidx.core.content.ContextCompat.startActivity;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.AppCompatButton;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.agrimart.R;\r\nimport com.example.agrimart.data.model.Order;\r\nimport com.example.agrimart.data.model.Product;\r\nimport com.example.agrimart.ui.Cart.CheckoutActivity;\r\nimport com.example.agrimart.ui.MyProfile.MyRating.ProductRatingActivity;\r\nimport com.example.agrimart.ui.MyProfile.MyRating.ShopRatingActivity;\r\nimport com.example.agrimart.ui.MyProfile.PurchasedOrders.OrderInformationActivity;\r\nimport com.example.agrimart.ui.Payment.VnpayRefund;\r\nimport com.example.agrimart.viewmodel.OrderStatusFragmentViewModel;\r\nimport com.google.firebase.Timestamp;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class OrderStoreAdapter extends RecyclerView.Adapter<OrderStoreAdapter.OrderStoreViewHolder> {\r\n    private final List<Order> orderStoreList = new ArrayList<>();\r\n    private OrderStatusFragmentViewModel viewModel;\r\n    private final int REQUEST_CODE_RATING = 1001;\r\n\r\n\r\n    // Constructor\r\n    public OrderStoreAdapter(List<Order> orderStoreList, OrderStatusFragmentViewModel viewModel) {\r\n        this.orderStoreList.addAll(orderStoreList);\r\n        this.viewModel = viewModel;\r\n    }\r\n\r\n    // Update orders when data changes\r\n    public void updateOrders(List<Order> newOrders) {\r\n        orderStoreList.clear();\r\n        orderStoreList.addAll(newOrders);\r\n        notifyDataSetChanged();\r\n    }\r\n\r\n\r\n    @NonNull\r\n    @Override\r\n    public OrderStoreViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        // Inflate the layout for each item\r\n        View view = LayoutInflater.from(parent.getContext())\r\n                .inflate(R.layout.item_order_store, parent, false);\r\n        return new OrderStoreViewHolder(view);\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    @Override\r\n    public void onBindViewHolder(@NonNull OrderStoreViewHolder holder, int position) {\r\n        // Get the current OrderStore\r\n        Order orderStore = orderStoreList.get(position);\r\n\r\n        List<Product> products = orderStore.getProducts();\r\n        ProductOrderAdapter productOrderAdapter = new ProductOrderAdapter(products);\r\n        productOrderAdapter.setOnProductClickListener(product -> {\r\n            openDetail(holder, orderStore);\r\n        });\r\n\r\n        holder.recyclerViewItemOrder.setAdapter(productOrderAdapter);\r\n        holder.recyclerViewItemOrder.setLayoutManager(new LinearLayoutManager(holder.itemView.getContext()));\r\n\r\n        // Set text data\r\n        holder.tvStoreName.setText(orderStore.getStoreName());\r\n\r\n        String translatedStatus;\r\n        switch (orderStore.getStatus()) {\r\n            case \"pending\":\r\n                translatedStatus = \"Chờ xác nhận\";\r\n                holder.btnBuy.setText(\"Hủy đơn hàng\");\r\n                break;\r\n            case \"approved\":\r\n                translatedStatus = \"Chờ lấy hàng\";\r\n                break;\r\n            case \"delivery\":\r\n                translatedStatus = \"Chờ giao hàng\";\r\n                holder.btnBuy.setText(\"Đã nhận hàng\");\r\n                holder.btnDetail.setVisibility(View.VISIBLE);\r\n                holder.btnDetail.setText(\"Trả hàng/Hoàn tiền\");\r\n                break;\r\n            case \"refund\":\r\n                translatedStatus = \"Chờ giao hàng\";\r\n                holder.btnBuy.setText(\"Đã nhận hàng\");\r\n                break;\r\n            case \"delivered\":\r\n                translatedStatus = \"Hoàn thành\";\r\n                if (!orderStore.isCheckRating()) {\r\n                    holder.btnBuy.setText(\"Đánh giá\");\r\n                    holder.btnDetail.setVisibility(View.VISIBLE);\r\n                    holder.btnDetail.setText(\"Trả hàng/Hoàn tiền\");\r\n                } else {\r\n                    holder.btnDetail.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                break;\r\n            case \"canceled\":\r\n                translatedStatus = \"Đã hủy\";\r\n                holder.btnDetail.setText(\"Xem Thông tin Hoàn tiền\");\r\n                break;\r\n            default:\r\n                translatedStatus = \"Không xác định\";\r\n                break;\r\n        }\r\n        holder.tvStatus.setText(translatedStatus);\r\n\r\n        // Thêm listener cho btnBuy\r\n        holder.btnBuy.setOnClickListener(v -> cancelOrder(holder, orderStore));  // Truyền đúng item vào đây\r\n\r\n        holder.tvTotalPrice.setText(\"Tổng số tiền: \" + orderStore.getTotalPrice() + \" VND\");\r\n\r\n        holder.main.setOnClickListener(v -> openDetail(holder, orderStore));\r\n\r\n        holder.btnDetail.setOnClickListener(v -> openRating(holder, orderStore));\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return orderStoreList.size();\r\n    }\r\n\r\n    // ViewHolder class\r\n    static class OrderStoreViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        TextView tvStoreName, tvStatus, tvTotalPrice;\r\n        ImageView imageView;\r\n        RecyclerView recyclerViewItemOrder;\r\n        AppCompatButton btnBuy, btnDetail;\r\n        LinearLayout main;\r\n\r\n        public OrderStoreViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            main = itemView.findViewById(R.id.main);\r\n            tvStoreName = itemView.findViewById(R.id.tv_store_name);\r\n            tvStatus = itemView.findViewById(R.id.status);\r\n            tvTotalPrice = itemView.findViewById(R.id.total_price);\r\n            imageView = itemView.findViewById(R.id.imageView9);\r\n            recyclerViewItemOrder = itemView.findViewById(R.id.recyclerViewItemOrder);\r\n            btnBuy = itemView.findViewById(R.id.btn_buy);\r\n            btnDetail = itemView.findViewById(R.id.btn_detail);\r\n        }\r\n    }\r\n\r\n    private void cancelOrder(OrderStoreViewHolder holder, Order order) {\r\n        int position = holder.getAdapterPosition(); // Lấy đúng vị trí của item\r\n        if (position == RecyclerView.NO_POSITION) {\r\n            return; // Nếu vị trí không hợp lệ, thoát khỏi phương thức\r\n        }\r\n\r\n        if (order.getStatus().equals(\"pending\") && order.getPaymentMethod().equals(\"COD\")) {\r\n            viewModel.updateOrderStatus(order.getOrderId(), \"canceled\", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {\r\n                @Override\r\n                public void onSuccess(String message) {\r\n                    // Cập nhật trạng thái của item trong adapter\r\n                    order.setStatus(\"pending\");\r\n                    notifyItemChanged(position); // Chỉ cập nhật item tại vị trí hiện tại\r\n                    Toast.makeText(holder.itemView.getContext(), \"Đơn hàng đã hủy!\", Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                @Override\r\n                public void onError(String errorMessage) {\r\n                    Toast.makeText(holder.itemView.getContext(), \"Không thể hủy đơn hàng: \" + errorMessage, Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n        } else if (order.getStatus().equals(\"pending\") && order.getPaymentMethod().equals(\"VNPay\")) {\r\n            // Khi trả hàng gọi api hoàn tiền\r\n            FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n            db.collection(\"orders\").document(order.getOrderId()).get().addOnSuccessListener(documentSnapshot -> {\r\n                if (documentSnapshot.exists()) {\r\n                    String vnpTxnRef = documentSnapshot.getString(\"vnpTxnRef\");\r\n                    order.setVnpTxnRef(vnpTxnRef);\r\n\r\n                    new Thread(() -> {\r\n                        try {\r\n                            String vnp_TxnRef = order.getVnpTxnRef();\r\n                            String transactionId = order.getTransactionId();\r\n                            int totalPrice = order.getTotalPrice();\r\n                            String formattedTransactionDate = formatTimestampToVnpayDate(order.getTransactionDate());\r\n\r\n                            // Gửi yêu cầu hoàn tiền\r\n                            String response = VnpayRefund.createRefundRequest(\r\n                                    vnp_TxnRef,          // Mã giao dịch của merchant (txnRef)\r\n                                    transactionId,       // Mã giao dịch từ VNPAY\r\n                                    totalPrice,          // Số tiền hoàn\r\n                                    formattedTransactionDate, // Ngày giao dịch gốc\r\n                                    \"Hoàn tiền cho đơn hàng \" + order.getOrderId(), // Lý do hoàn tiền\r\n                                    \"admin\"              // Người thực hiện\r\n                            );\r\n\r\n                            //nếu hoàn tiền thành công\r\n                            if (response.contains(\"\\\"vnp_ResponseCode\\\":\\\"00\\\"\")) { //ResponseCode là 00 (Hoàn tiền thành công)\r\n                                new android.os.Handler(Looper.getMainLooper()).post(() -> {\r\n                                    Toast.makeText(holder.itemView.getContext(), \"Huỷ đơn hàng thành công\", Toast.LENGTH_SHORT).show();\r\n                                });\r\n\r\n                                // Cập nhật trạng thái đơn hàng\r\n                                viewModel.updateOrderStatus(order.getOrderId(), \"canceled\", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {\r\n                                    @Override\r\n                                    public void onSuccess(String message) {\r\n                                        order.setStatus(\"canceled\");\r\n                                        notifyItemChanged(position);\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onError(String errorMessage) {\r\n                                        new android.os.Handler(Looper.getMainLooper()).post(() -> {\r\n                                            Toast.makeText(holder.itemView.getContext(), \"Không thể hủy đơn hàng: \" + errorMessage, Toast.LENGTH_SHORT).show();\r\n                                        });\r\n                                    }\r\n                                });\r\n\r\n                            } else {\r\n                                //nếu hoàn tiền không thành công\r\n                                new android.os.Handler(Looper.getMainLooper()).post(() -> {\r\n                                    Toast.makeText(holder.itemView.getContext(), \"Không thể hoàn tiền: \" + response, Toast.LENGTH_SHORT).show();\r\n                                });\r\n                                Log.println(Log.ERROR, \"VnpayRefund\", response);\r\n                            }\r\n                        } catch (Exception e) {\r\n                            new android.os.Handler(Looper.getMainLooper()).post(() -> {\r\n                                Toast.makeText(holder.itemView.getContext(), \"Lỗi: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                            });\r\n                        }\r\n                    }).start();\r\n                } else {\r\n                    Toast.makeText(holder.itemView.getContext(), \"Đơn hàng không tồn tại\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }).addOnFailureListener(e -> {\r\n                Toast.makeText(holder.itemView.getContext(), \"Lỗi khi lấy thông tin đơn hàng: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n            });\r\n        } else if (order.getStatus().equals(\"delivery\")) {\r\n            viewModel.updateOrderStatus(order.getOrderId(), \"delivered\", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {\r\n                @Override\r\n                public void onSuccess(String message) {\r\n                    // Cập nhật trạng thái của item trong adapter\r\n                    viewModel.getData(\"delivery\");\r\n                    order.setStatus(\"delivery\");\r\n                    notifyItemChanged(position);\r\n\r\n                    Intent intent = new Intent(holder.itemView.getContext(), ProductRatingActivity.class);\r\n\r\n                    intent.putExtra(\"order\", order);\r\n                    holder.itemView.getContext().startActivity(intent);\r\n                }\r\n\r\n                @Override\r\n                public void onError(String errorMessage) {\r\n                    Toast.makeText(holder.itemView.getContext(), \"Không thể cập nhật trạng thái: \" + errorMessage, Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n        } else if (order.getStatus().equals(\"delivered\") && !order.isCheckRating()) {\r\n\r\n            // Cập nhật trạng thái của item trong adapter\r\n            order.setStatus(\"delivered\");\r\n            notifyItemChanged(position);\r\n\r\n            Intent intent = new Intent(holder.itemView.getContext(), ProductRatingActivity.class);\r\n            intent.putExtra(\"order\", order);\r\n            intent.putExtra(\"position\", 2);\r\n            ((Activity) holder.itemView.getContext()).startActivityForResult(intent, REQUEST_CODE_RATING);\r\n        } else {\r\n            onCheckoutButtonClicked(holder, order);\r\n        }\r\n    }\r\n\r\n    private void openDetail(OrderStoreViewHolder holder, Order order) {\r\n        int position = holder.getAdapterPosition(); // Lấy đúng vị trí của item\r\n        if (position == RecyclerView.NO_POSITION) {\r\n            return; // Nếu vị trí không hợp lệ, thoát khỏi phương thức\r\n        }\r\n\r\n        Intent intent = new Intent(holder.itemView.getContext(), OrderInformationActivity.class);\r\n        intent.putExtra(\"order\", order);\r\n        holder.itemView.getContext().startActivity(intent);\r\n    }\r\n\r\n    private void onCheckoutButtonClicked(OrderStoreViewHolder holder, Order order) {\r\n        List<Product> selectedProducts = new ArrayList<>();\r\n        List<String> productIds = new ArrayList<>();\r\n\r\n        selectedProducts = order.getProducts();\r\n\r\n        for (Product p : selectedProducts) {\r\n            productIds.add(p.getProduct_id());\r\n        }\r\n\r\n        Intent intent = new Intent(holder.itemView.getContext(), CheckoutActivity.class);\r\n        intent.putParcelableArrayListExtra(\"selectedProducts\", new ArrayList<>(selectedProducts));\r\n        intent.putStringArrayListExtra(\"productIds\", new ArrayList<>(productIds));\r\n        intent.putExtra(\"storeName\", order.getStoreName());\r\n        holder.itemView.getContext().startActivity(intent);\r\n\r\n    }\r\n\r\n    private void openRating(OrderStoreViewHolder holder, Order order) {\r\n        Intent intent = new Intent(holder.itemView.getContext(), ShopRatingActivity.class);\r\n        intent.putExtra(\"order\", order);\r\n        holder.itemView.getContext().startActivity(intent);\r\n    }\r\n\r\n    public static String formatTimestampToVnpayDate(Timestamp timestamp) {\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.getDefault());\r\n        Date date = new Date(timestamp.toDate().getTime());\r\n        return formatter.format(date);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/agrimart/adapter/OrderStoreAdapter.java b/app/src/main/java/com/example/agrimart/adapter/OrderStoreAdapter.java
--- a/app/src/main/java/com/example/agrimart/adapter/OrderStoreAdapter.java	(revision ba936340bbdac641ba150d1b6cdedfa85d9a87db)
+++ b/app/src/main/java/com/example/agrimart/adapter/OrderStoreAdapter.java	(date 1733220249121)
@@ -94,13 +94,13 @@
             case "approved":
                 translatedStatus = "Chờ lấy hàng";
                 break;
-            case "delivery":
+            case "delivering":
                 translatedStatus = "Chờ giao hàng";
                 holder.btnBuy.setText("Đã nhận hàng");
                 holder.btnDetail.setVisibility(View.VISIBLE);
                 holder.btnDetail.setText("Trả hàng/Hoàn tiền");
                 break;
-            case "refund":
+            case "return":
                 translatedStatus = "Chờ giao hàng";
                 holder.btnBuy.setText("Đã nhận hàng");
                 break;
@@ -198,7 +198,7 @@
                             String vnp_TxnRef = order.getVnpTxnRef();
                             String transactionId = order.getTransactionId();
                             int totalPrice = order.getTotalPrice();
-                            String formattedTransactionDate = formatTimestampToVnpayDate(order.getTransactionDate());
+                            String formattedTransactionDate = formatTimestampToVnpayDate(order.getTransactionDateMillis());
 
                             // Gửi yêu cầu hoàn tiền
                             String response = VnpayRefund.createRefundRequest(
@@ -217,7 +217,7 @@
                                 });
 
                                 // Cập nhật trạng thái đơn hàng
-                                viewModel.updateOrderStatus(order.getOrderId(), "canceled", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {
+                                viewModel.updateOrderStatusRefund(order.getOrderId(), "canceled", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {
                                     @Override
                                     public void onSuccess(String message) {
                                         order.setStatus("canceled");
@@ -237,7 +237,7 @@
                                 new android.os.Handler(Looper.getMainLooper()).post(() -> {
                                     Toast.makeText(holder.itemView.getContext(), "Không thể hoàn tiền: " + response, Toast.LENGTH_SHORT).show();
                                 });
-                                Log.println(Log.ERROR, "VnpayRefund", response);
+                                Log.println(Log.ERROR, "Vnpayreturn", response);
                             }
                         } catch (Exception e) {
                             new android.os.Handler(Looper.getMainLooper()).post(() -> {
@@ -251,13 +251,13 @@
             }).addOnFailureListener(e -> {
                 Toast.makeText(holder.itemView.getContext(), "Lỗi khi lấy thông tin đơn hàng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
             });
-        } else if (order.getStatus().equals("delivery")) {
+        } else if (order.getStatus().equals("delivering")) {
             viewModel.updateOrderStatus(order.getOrderId(), "delivered", new OrderStatusFragmentViewModel.OnStatusUpdateListener() {
                 @Override
                 public void onSuccess(String message) {
                     // Cập nhật trạng thái của item trong adapter
-                    viewModel.getData("delivery");
-                    order.setStatus("delivery");
+                    viewModel.getData("delivering");
+                    order.setStatus("delivering");
                     notifyItemChanged(position);
 
                     Intent intent = new Intent(holder.itemView.getContext(), ProductRatingActivity.class);
@@ -321,9 +321,9 @@
         holder.itemView.getContext().startActivity(intent);
     }
 
-    public static String formatTimestampToVnpayDate(Timestamp timestamp) {
+    public static String formatTimestampToVnpayDate(Long timestamp) {
         SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault());
-        Date date = new Date(timestamp.toDate().getTime());
+        Date date = new Date(timestamp);
         return formatter.format(date);
     }
 
Index: app/src/main/java/com/example/agrimart/viewmodel/OrderStatusFragmentViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.agrimart.viewmodel;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.ViewModel;\r\nimport com.example.agrimart.data.model.Order;\r\nimport com.example.agrimart.data.model.Product;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FieldValue;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.Query;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\npublic class OrderStatusFragmentViewModel extends ViewModel {\r\n    private final FirebaseFirestore firestore;\r\n    private final FirebaseAuth auth;\r\n    private String userId;\r\n    private final MutableLiveData<List<Order>> orders = new MutableLiveData<>();\r\n\r\n    public LiveData<List<Order>> getOrders() {\r\n        return orders;\r\n    }\r\n\r\n    public OrderStatusFragmentViewModel() {\r\n        this.auth = FirebaseAuth.getInstance();\r\n        this.firestore = FirebaseFirestore.getInstance();\r\n    }\r\n\r\n    public void getData(String status) {\r\n        userId = auth.getCurrentUser().getUid();\r\n        firestore.collection(\"orders\")\r\n                .whereEqualTo(\"userId\", userId)\r\n                .whereEqualTo(\"status\", status)\r\n                .orderBy(\"created_at\", Query.Direction.DESCENDING)\r\n                .get()\r\n                .addOnCompleteListener(task -> {\r\n                    if (task.isSuccessful() && task.getResult() != null) {\r\n                        List<Order> orderList = task.getResult().toObjects(Order.class);\r\n                        if (!orderList.isEmpty()) {\r\n                            // Lấy danh sách các ID sản phẩm từ đơn hàng\r\n                            fetchProductDetailsAndStore(orderList, new OnDataFetchedListener() {\r\n                                @Override\r\n                                public void onDataFetched(List<Order> updatedOrders) {\r\n                                    orders.setValue(updatedOrders); // Cập nhật LiveData sau khi lấy xong dữ liệu\r\n                                }\r\n\r\n                                @Override\r\n                                public void onError(String errorMessage) {\r\n                                    // Handle error\r\n                                    orders.setValue(new ArrayList<>());\r\n                                }\r\n                            });\r\n                        } else {\r\n                            orders.setValue(new ArrayList<>());\r\n                        }\r\n                    } else {\r\n                        orders.setValue(new ArrayList<>());\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n    // Cập nhật thông tin của sản phẩm từ collection \"products\"\r\n    private void fetchProductDetailsAndStore(List<Order> storeOrderList, final OnDataFetchedListener listener) {\r\n        // Khởi tạo danh sách với kích thước bằng storeOrderList để đảm bảo thứ tự\r\n        List<Order> updatedStoreOrderList = new ArrayList<>(storeOrderList.size());\r\n        for (int i = 0; i < storeOrderList.size(); i++) {\r\n            updatedStoreOrderList.add(i, null); // Đảm bảo mỗi vị trí trong danh sách là null trước khi cập nhật\r\n        }\r\n\r\n        AtomicInteger remainingRequests = new AtomicInteger(storeOrderList.size());  // Đếm số lượng yêu cầu còn lại\r\n\r\n        for (int i = 0; i < storeOrderList.size(); i++) {\r\n            Order storeOrder = storeOrderList.get(i);\r\n            List<Product> products = storeOrder.getProducts();\r\n            AtomicInteger productRequests = new AtomicInteger(products.size());  // Đếm số lượng yêu cầu cho từng sản phẩm\r\n\r\n            for (Product product : products) {\r\n                int finalI = i;\r\n                firestore.collection(\"products\")\r\n                        .document(product.getProduct_id())\r\n                        .get()\r\n                        .addOnCompleteListener(productTask -> {\r\n                            if (productTask.isSuccessful()) {\r\n                                DocumentSnapshot productDoc = productTask.getResult();\r\n                                if (productDoc.exists()) {\r\n                                    // Cập nhật thông tin sản phẩm từ Firestore\r\n                                    product.setName(productDoc.getString(\"name\"));\r\n                                    product.setPrice(productDoc.getDouble(\"price\"));\r\n                                    product.setImages((List<String>) productDoc.get(\"images\"));\r\n                                    product.setStoreId(productDoc.getString(\"storeId\"));\r\n                                    product.setUnit(productDoc.getString(\"unit\"));\r\n                                }\r\n                            } else {\r\n                                listener.onError(\"Lấy thông tin sản phẩm thất bại: \" + productTask.getException().getMessage());\r\n                            }\r\n\r\n                            // Sau khi tất cả sản phẩm của đơn hàng đã được cập nhật\r\n                            if (productRequests.decrementAndGet() == 0) {\r\n                                firestore.collection(\"users\")\r\n                                        .document(storeOrder.getSellerId())\r\n                                        .get()\r\n                                        .addOnCompleteListener(userTask -> {\r\n                                            if (userTask.isSuccessful()) {\r\n                                                DocumentSnapshot storeDoc = userTask.getResult();\r\n                                                if (storeDoc.exists()) {\r\n                                                    // Cập nhật thông tin cửa hàng từ Firestore\r\n                                                    storeOrder.setStoreName(storeDoc.getString(\"store_name\"));\r\n                                                }\r\n                                            } else {\r\n                                                listener.onError(\"Lấy thông tin cửa hàng thất bại: \" + userTask.getException().getMessage());\r\n                                            }\r\n\r\n                                            // Đặt storeOrder đã được cập nhật vào đúng vị trí trong danh sách\r\n                                            updatedStoreOrderList.set(finalI, storeOrder);\r\n\r\n                                            // Sau khi tất cả các yêu cầu đã hoàn thành\r\n                                            if (remainingRequests.decrementAndGet() == 0) {\r\n                                                listener.onDataFetched(updatedStoreOrderList); // Gọi listener khi tất cả dữ liệu đã được lấy về\r\n                                            }\r\n                                        });\r\n                            }\r\n                        });\r\n            }\r\n        }\r\n    }\r\n\r\n    public void updateOrderStatus(String orderId, String newStatus, OnStatusUpdateListener listener) {\r\n        Map<String, Object> updates = new HashMap<>();\r\n        updates.put(\"status\", newStatus);\r\n        updates.put(\"created_at\", FieldValue.serverTimestamp()); // Thêm thời gian hiện hành\r\n\r\n        firestore.collection(\"orders\")\r\n                .document(orderId)\r\n                .update(updates)\r\n                .addOnSuccessListener(unused -> listener.onSuccess(\"Order status updated successfully\"))\r\n                .addOnFailureListener(e -> listener.onError(\"Failed to update order status: \" + e.getMessage()));\r\n    }\r\n\r\n\r\n    public interface OnStatusUpdateListener {\r\n        void onSuccess(String message);\r\n        void onError(String errorMessage);\r\n    }\r\n\r\n\r\n    public interface OnDataFetchedListener {\r\n        void onDataFetched(List<Order> updatedOrders);\r\n        void onError(String errorMessage);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/agrimart/viewmodel/OrderStatusFragmentViewModel.java b/app/src/main/java/com/example/agrimart/viewmodel/OrderStatusFragmentViewModel.java
--- a/app/src/main/java/com/example/agrimart/viewmodel/OrderStatusFragmentViewModel.java	(revision ba936340bbdac641ba150d1b6cdedfa85d9a87db)
+++ b/app/src/main/java/com/example/agrimart/viewmodel/OrderStatusFragmentViewModel.java	(date 1733215239742)
@@ -143,6 +143,21 @@
     }
 
 
+    public void updateOrderStatusRefund(String orderId, String newStatus, OnStatusUpdateListener listener) {
+        Map<String, Object> updates = new HashMap<>();
+        updates.put("status", newStatus);
+        updates.put("created_at", FieldValue.serverTimestamp()); // Thêm thời gian hiện hành
+        updates.put("refund", true); // Thêm trường refund với giá trị true
+
+        firestore.collection("orders")
+                .document(orderId)
+                .update(updates)
+                .addOnSuccessListener(unused -> listener.onSuccess("Order status updated successfully"))
+                .addOnFailureListener(e -> listener.onError("Failed to update order status: " + e.getMessage()));
+    }
+
+
+
     public interface OnStatusUpdateListener {
         void onSuccess(String message);
         void onError(String errorMessage);
Index: app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/PurchasedOrdersActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.agrimart.ui.MyProfile.PurchasedOrders;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.widget.ImageButton;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.graphics.Insets;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.core.view.WindowInsetsCompat;\r\nimport com.example.agrimart.R;\r\nimport com.example.agrimart.adapter.ViewPagerAdapter;\r\nimport com.example.agrimart.data.model.Order;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.android.material.tabs.TabLayoutMediator;\r\n\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager2.widget.ViewPager2;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class PurchasedOrdersActivity extends AppCompatActivity {\r\n    private static final String TAG = \"PurchasedOrdersActivity\"; // Thêm hằng số TAG cho log\r\n    private static final int REQUEST_CODE_RATING = 1001;\r\n\r\n    private ViewPager2 viewPager;\r\n    private List<Fragment> fragments;\r\n\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == REQUEST_CODE_RATING) {\r\n            if (resultCode == RESULT_OK) {\r\n                    loadFragmentAtPosition(4);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void loadFragmentAtPosition(int position) {\r\n        if (position >= 0 && position < fragments.size()) {\r\n            // Lấy Fragment tại vị trí cần load lại\r\n            Fragment newFragment = new OrderStatusFragment(\"delivered\");\r\n\r\n            // Thay thế Fragment hiện tại tại vị trí đó\r\n            fragments.set(position , newFragment);\r\n\r\n            // Cập nhật lại adapter với danh sách fragment mới\r\n            ViewPagerAdapter adapter = new ViewPagerAdapter(this, fragments, Arrays.asList(\"Chờ xác nhận\", \"Chờ giao hàng\", \"Trả hàng\", \"Đã giao\", \"Đã hủy\"));\r\n            viewPager.setAdapter(adapter);\r\n\r\n\r\n            viewPager.setCurrentItem(position, true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_purchased_orders);\r\n\r\n        // Khởi tạo TabLayout và ViewPager2\r\n        TabLayout tabLayout = findViewById(R.id.tab_layout);\r\n        viewPager = findViewById(R.id.view_pager);\r\n        ImageButton btn_back = findViewById(R.id.btn_back);\r\n\r\n        // Tạo danh sách Fragment và trạng thái\r\n        fragments = new ArrayList<>();\r\n        List<String> titles = Arrays.asList(\"Chờ xác nhận\", \"Chờ lấy hàng\", \"Chờ giao hàng\", \"Trả hàng\" ,\"Đã giao\", \"Đã hủy\");\r\n        List<String> statuses = Arrays.asList(\"pending\", \"approved\", \"delivery\", \"refund\" ,\"delivered\", \"canceled\");\r\n\r\n        for (String status : statuses) {\r\n            fragments.add(new OrderStatusFragment(status)); // Thêm các fragment vào danh sách\r\n        }\r\n\r\n        // Gán adapter cho ViewPager2\r\n        ViewPagerAdapter viewPagerAdapter = new ViewPagerAdapter(this, fragments, titles);\r\n        viewPager.setAdapter(viewPagerAdapter);\r\n\r\n        // Thiết lập TabLayout với ViewPager2\r\n        new TabLayoutMediator(tabLayout, viewPager, (tab, pos) -> tab.setText(titles.get(pos))).attach();\r\n\r\n        int selectedTab = getIntent().getIntExtra(\"selectedTab\", 0); // 0 là giá trị mặc định\r\n        if (selectedTab >= 0 && selectedTab < fragments.size()) {\r\n            viewPager.setCurrentItem(selectedTab, true); // Thiết lập tab được chọn\r\n        }\r\n\r\n        btn_back.setOnClickListener(v -> onBackPressed());\r\n    }\r\n\r\n    private int location (String status)\r\n    {\r\n        switch (status){\r\n            case \"pending\": return 0;\r\n            case \"approved\": return 1;\r\n            case \"delivery\": return 2;\r\n            case \"refund\": return 3;\r\n            case \"delivered\": return 4;\r\n            case \"canceled\" : return 5;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/PurchasedOrdersActivity.java b/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/PurchasedOrdersActivity.java
--- a/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/PurchasedOrdersActivity.java	(revision ba936340bbdac641ba150d1b6cdedfa85d9a87db)
+++ b/app/src/main/java/com/example/agrimart/ui/MyProfile/PurchasedOrders/PurchasedOrdersActivity.java	(date 1733215981834)
@@ -70,7 +70,7 @@
         // Tạo danh sách Fragment và trạng thái
         fragments = new ArrayList<>();
         List<String> titles = Arrays.asList("Chờ xác nhận", "Chờ lấy hàng", "Chờ giao hàng", "Trả hàng" ,"Đã giao", "Đã hủy");
-        List<String> statuses = Arrays.asList("pending", "approved", "delivery", "refund" ,"delivered", "canceled");
+        List<String> statuses = Arrays.asList("pending", "approved", "delivering", "return" ,"delivered", "canceled");
 
         for (String status : statuses) {
             fragments.add(new OrderStatusFragment(status)); // Thêm các fragment vào danh sách
